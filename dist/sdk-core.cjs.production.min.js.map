{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/currencyEquals.ts","../src/entities/baseCurrency.ts","../src/entities/ether.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/utils/sqrt.ts","../src/utils/wrappedCurrency.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/wrappedCurrencyAmount.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  EVMOS = 9001,\r\n  EVMOS_TESTNET = 9000,\r\n  ZKSYNC_TESTNET = 280,\r\n  ZKSYNC_MAINNET = 324\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')","import { Currency } from '../entities/currency'\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA.isToken && currencyB.isToken) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA.isToken) {\r\n    return false\r\n  } else if (currencyB.isToken) {\r\n    return false\r\n  } else {\r\n    return currencyA.isEther === currencyB.isEther\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport abstract class BaseCurrency {\r\n  public abstract readonly isEther: boolean\r\n  public abstract readonly isToken: boolean\r\n\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the currency Ether\r\n */\r\nexport class Ether extends BaseCurrency {\r\n  public readonly isEther: true = true\r\n  public readonly isToken: false = false\r\n\r\n  /**\r\n   * Only called once by this class\r\n   * @protected\r\n   */\r\n  protected constructor() {\r\n    super(18, 'ETH', 'Ether')\r\n  }\r\n\r\n  /**\r\n   * The only instance of the class `Ether`.\r\n   */\r\n  public static readonly ETHER: Ether = new Ether()\r\n}\r\n\r\nexport const ETHER = Ether.ETHER\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport { Currency } from '../currency'\r\nimport { Ether } from '../ether'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param rawAmount ether amount in wei\r\n   */\r\n  public static ether(rawAmount: BigintIsh): CurrencyAmount<Ether> {\r\n    return CurrencyAmount.fromRawAmount(Ether.ETHER, rawAmount)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isEther: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public readonly chainId: ChainId | number\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\nexport const WETH9: { [chainId in ChainId]: Token } = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.EVMOS]: new Token(ChainId.EVMOS, '0xD4949664cD82660AaE99bEdc034a0deA8A0bd517', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.EVMOS_TESTNET]: new Token(\r\n    ChainId.EVMOS_TESTNET,\r\n    '0xcc491f589B45d4a3C679016195B3FB87D7848210',\r\n    18,\r\n    'EVMOS',\r\n    'Evmos'\r\n  ),\r\n  [ChainId.ZKSYNC_TESTNET]: new Token(ChainId.ZKSYNC_TESTNET, '0x294cB514815CAEd9557e6bAA2947d6Cf0733f014', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.ZKSYNC_MAINNET]: new Token(ChainId.ZKSYNC_MAINNET, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH9', 'Wrapped Ether'),\r\n}","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { Currency, Token, WETH9 } from '../entities'\r\n\r\n/**\r\n * Given a currency which can be Ether or a token, return wrapped ether for ether and the token for the token\r\n * @param currency the currency to wrap, if necessary\r\n * @param chainId the ID of the chain for wrapping\r\n */\r\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency.isToken) {\r\n    invariant(currency.chainId === chainId, 'CHAIN_ID')\r\n    return currency\r\n  }\r\n  if (currency.isEther) return WETH9[chainId]\r\n  throw new Error('CURRENCY')\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport { Currency, CurrencyAmount, Token } from '../entities'\r\nimport { wrappedCurrency } from './wrappedCurrency'\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as a wrapped token amount.\r\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount<Currency>,\r\n  chainId: ChainId\r\n): CurrencyAmount<Token> {\r\n  return CurrencyAmount.fromFractionalAmount(\r\n    wrappedCurrency(currencyAmount.currency, chainId),\r\n    currencyAmount.numerator,\r\n    currencyAmount.denominator\r\n  )\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","currencyEquals","currencyA","currencyB","isToken","equals","isEther","BaseCurrency","decimals","symbol","name","Number","isInteger","invariant","this","Ether","_BaseCurrency","_this","call","_inheritsLoose","ETHER","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","ether","added","subtracted","multiplied","divided","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","adjustedForDecimals","validateAndParseAddress","address","getAddress","error","Token","chainId","sortsBefore","toLowerCase","WETH9","_WETH","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","EVMOS","EVMOS_TESTNET","ZKSYNC_TESTNET","ZKSYNC_MAINNET","MAX_SAFE_INTEGER","ZERO","ONE","TWO","wrappedCurrency","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
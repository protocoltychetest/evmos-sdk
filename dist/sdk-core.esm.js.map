{"version":3,"file":"sdk-core.esm.js","sources":["../src/constants.ts","../src/utils/currencyEquals.ts","../src/entities/baseCurrency.ts","../src/entities/ether.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts","../src/utils/wrappedCurrency.ts","../src/utils/wrappedCurrencyAmount.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÃ–RLI = 5,\r\n  KOVAN = 42,\r\n  EVMOS = 9001,\r\n  EVMOS_TESTNET = 9000,\r\n  ZKSYNC_TESTNET = 280,\r\n  ZKSYNC_MAINNET = 324\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')","import { Currency } from '../entities/currency'\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA.isToken && currencyB.isToken) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA.isToken) {\r\n    return false\r\n  } else if (currencyB.isToken) {\r\n    return false\r\n  } else {\r\n    return currencyA.isEther === currencyB.isEther\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport abstract class BaseCurrency {\r\n  public abstract readonly isEther: boolean\r\n  public abstract readonly isToken: boolean\r\n\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the currency Ether\r\n */\r\nexport class Ether extends BaseCurrency {\r\n  public readonly isEther: true = true\r\n  public readonly isToken: false = false\r\n\r\n  /**\r\n   * Only called once by this class\r\n   * @protected\r\n   */\r\n  protected constructor() {\r\n    super(18, 'ETH', 'Ether')\r\n  }\r\n\r\n  /**\r\n   * The only instance of the class `Ether`.\r\n   */\r\n  public static readonly ETHER: Ether = new Ether()\r\n}\r\n\r\nexport const ETHER = Ether.ETHER\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport { Currency } from '../currency'\r\nimport { Ether } from '../ether'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param rawAmount ether amount in wei\r\n   */\r\n  public static ether(rawAmount: BigintIsh): CurrencyAmount<Ether> {\r\n    return CurrencyAmount.fromRawAmount(Ether.ETHER, rawAmount)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(currencyEquals(this.currency, other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { currencyEquals } from '../../utils/currencyEquals'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isEther: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public readonly chainId: ChainId | number\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\nexport const WETH9: { [chainId in ChainId]: Token } = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.EVMOS]: new Token(ChainId.EVMOS, '0xD4949664cD82660AaE99bEdc034a0deA8A0bd517', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.EVMOS_TESTNET]: new Token(\r\n    ChainId.EVMOS_TESTNET,\r\n    '0xcc491f589B45d4a3C679016195B3FB87D7848210',\r\n    18,\r\n    'EVMOS',\r\n    'Evmos'\r\n  ),\r\n  [ChainId.ZKSYNC_TESTNET]: new Token(ChainId.ZKSYNC_TESTNET, '0x294cB514815CAEd9557e6bAA2947d6Cf0733f014', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.ZKSYNC_MAINNET]: new Token(ChainId.ZKSYNC_MAINNET, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH9', 'Wrapped Ether'),\r\n}","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { Currency, Token, WETH9 } from '../entities'\r\n\r\n/**\r\n * Given a currency which can be Ether or a token, return wrapped ether for ether and the token for the token\r\n * @param currency the currency to wrap, if necessary\r\n * @param chainId the ID of the chain for wrapping\r\n */\r\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency.isToken) {\r\n    invariant(currency.chainId === chainId, 'CHAIN_ID')\r\n    return currency\r\n  }\r\n  if (currency.isEther) return WETH9[chainId]\r\n  throw new Error('CURRENCY')\r\n}\r\n","import { ChainId } from '../constants'\r\nimport { Currency, CurrencyAmount, Token } from '../entities'\r\nimport { wrappedCurrency } from './wrappedCurrency'\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as a wrapped token amount.\r\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount<Currency>,\r\n  chainId: ChainId\r\n): CurrencyAmount<Token> {\r\n  return CurrencyAmount.fromFractionalAmount(\r\n    wrappedCurrency(currencyAmount.currency, chainId),\r\n    currencyAmount.numerator,\r\n    currencyAmount.denominator\r\n  )\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","currencyEquals","currencyA","currencyB","isToken","equals","isEther","BaseCurrency","decimals","symbol","name","Number","isInteger","process","env","NODE_ENV","invariant","Ether","_BaseCurrency","_inheritsLoose","_this","call","ETHER","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","ether","added","subtracted","multiplied","divided","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","adjustedForDecimals","validateAndParseAddress","address","getAddress","error","Token","chainId","sortsBefore","toLowerCase","WETH9","_WETH","MAINNET","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","EVMOS","EVMOS_TESTNET","ZKSYNC_TESTNET","ZKSYNC_MAINNET","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","wrappedCurrency","wrappedCurrencyAmount"],"mappings":";;;;;;;IAKYA;AAAZ,WAAYA,OAAO;EACjBA,2CAAW;EACXA,2CAAW;EACXA,2CAAW;EACXA,6CAAS;EACTA,wCAAU;EACVA,0CAAY;EACZA,0DAAoB;EACpBA,2DAAoB;EACpBA,2DAAoB;AACtB,CAAC,EAVWA,OAAO,KAAPA,OAAO;IAYPC;AAAZ,WAAYA,SAAS;EACnBA,uDAAW;EACXA,yDAAY;AACd,CAAC,EAHWA,SAAS,KAATA,SAAS;IAKTC;AAAZ,WAAYA,QAAQ;EAClBA,mDAAU;EACVA,yDAAa;EACbA,+CAAQ;AACV,CAAC,EAJWA,QAAQ,KAARA,QAAQ;IAMPC,UAAU,gBAAGC,IAAI,CAACC,MAAM,CAAC,oEAAoE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1B1G;;;AAGA,SAAgBC,cAAcA,CAACC,SAAmB,EAAEC,SAAmB;EACrE,IAAID,SAAS,CAACE,OAAO,IAAID,SAAS,CAACC,OAAO,EAAE;IAC1C,OAAOF,SAAS,CAACG,MAAM,CAACF,SAAS,CAAC;GACnC,MAAM,IAAID,SAAS,CAACE,OAAO,EAAE;IAC5B,OAAO,KAAK;GACb,MAAM,IAAID,SAAS,CAACC,OAAO,EAAE;IAC5B,OAAO,KAAK;GACb,MAAM;IACL,OAAOF,SAAS,CAACI,OAAO,KAAKH,SAAS,CAACG,OAAO;;AAElD;;ACbA;;;;;AAKA,IAAsBC,YAAY;AAQhC;;;;;;AAMA,SAAAA,aAAsBC,QAAgB,EAAEC,MAAe,EAAEC,IAAa;EACpE,EAAUF,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,IAAIG,MAAM,CAACC,SAAS,CAACJ,QAAQ,CAAC,IAAAK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAvEC,SAAS,QAAgE,UAAU,IAAnFA,SAAS;EAET,IAAI,CAACR,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;AAClB,CAAC;;ACzBH;;;AAGA,IAAaO,KAAM,0BAAAC,aAAA;EAAAC,cAAA,CAAAF,KAAA,EAAAC,aAAA;;;;;EAQjB,SAAAD;;IACEG,KAAA,GAAAF,aAAA,CAAAG,IAAA,OAAM,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC;IARXD,KAAA,QAAO,GAAS,IAAI;IACpBA,KAAA,QAAO,GAAU,KAAK;IAAA,OAAAA,KAAA;;EAQrC,OAAAH,KAAA;AAAA,EAVwBV,YAAY;AAYrC;;;AAGuBU,WAAK,gBAAU,IAAIA,KAAK,EAAE;AAGnD,IAAaK,KAAK,GAAGL,KAAK,CAACK,KAAK;;;ACvBhC,AAQA,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAQ,CAAC;AAClC,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAI,CAAC;AAE1B,IAAMC,qBAAqB,IAAAC,qBAAA,OAAAA,qBAAA,CACxBhC,QAAQ,CAACiC,UAAU,IAAGP,OAAO,CAACO,UAAU,EAAAD,qBAAA,CACxChC,QAAQ,CAACkC,aAAa,IAAGR,OAAO,CAACQ,aAAa,EAAAF,qBAAA,CAC9ChC,QAAQ,CAACmC,QAAQ,IAAGT,OAAO,CAACS,QAAQ,EAAAH,qBAAA,CACtC;AAED,IAAMI,eAAe,IAAAC,gBAAA,OAAAA,gBAAA,CAClBrC,QAAQ,CAACiC,UAAU,wBACnBjC,QAAQ,CAACkC,aAAa,wBACtBlC,QAAQ,CAACmC,QAAQ,wBACnB;AAED,IAAaG,QAAQ;EAInB,SAAAA,SAAmBC,SAAoB,EAAEC;QAAAA;MAAAA,cAAyBtC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;;IAC9E,IAAI,CAACoC,SAAS,GAAGrC,IAAI,CAACC,MAAM,CAACoC,SAAS,CAAC;IACvC,IAAI,CAACC,WAAW,GAAGtC,IAAI,CAACC,MAAM,CAACqC,WAAW,CAAC;;EAC5CF,QAAA,CAEcG,gBAAgB,GAAvB,SAAAA,iBAAwBC,WAAiC;IAC/D,IAAIA,WAAW,YAAYxC,IAAI,IAAI,OAAOwC,WAAW,KAAK,QAAQ,IAAI,OAAOA,WAAW,KAAK,QAAQ,EACnG,OAAO,IAAIJ,QAAQ,CAACI,WAAW,CAAC;IAElC,IAAI,WAAW,IAAIA,WAAW,IAAI,aAAa,IAAIA,WAAW,EAAE,OAAOA,WAAW;IAClF,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;;;;EAG7C,IAAAC,MAAA,GAAAN,QAAA,CAAAO,SAAA;EAAAD,MAAA,CAUOE,MAAM,GAAN,SAAAA;IACL,OAAO,IAAIR,QAAQ,CAAC,IAAI,CAACE,WAAW,EAAE,IAAI,CAACD,SAAS,CAAC;GACtD;EAAAK,MAAA,CAEMG,GAAG,GAAH,SAAAA,IAAIC,KAA2B;IACpC,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,IAAI9C,IAAI,CAACgD,KAAK,CAAC,IAAI,CAACV,WAAW,EAAES,WAAW,CAACT,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIF,QAAQ,CAACpC,IAAI,CAAC6C,GAAG,CAAC,IAAI,CAACR,SAAS,EAAEU,WAAW,CAACV,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;;IAExF,OAAO,IAAIF,QAAQ,CACjBpC,IAAI,CAAC6C,GAAG,CACN7C,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACT,WAAW,CAAC,EACtDtC,IAAI,CAACiD,QAAQ,CAACF,WAAW,CAACV,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD,EACDtC,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACX,WAAW,EAAES,WAAW,CAACT,WAAW,CAAC,CACzD;GACF;EAAAI,MAAA,CAEMQ,QAAQ,GAAR,SAAAA,SAASJ,KAA2B;IACzC,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,IAAI9C,IAAI,CAACgD,KAAK,CAAC,IAAI,CAACV,WAAW,EAAES,WAAW,CAACT,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIF,QAAQ,CAACpC,IAAI,CAACkD,QAAQ,CAAC,IAAI,CAACb,SAAS,EAAEU,WAAW,CAACV,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;;IAE7F,OAAO,IAAIF,QAAQ,CACjBpC,IAAI,CAACkD,QAAQ,CACXlD,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACT,WAAW,CAAC,EACtDtC,IAAI,CAACiD,QAAQ,CAACF,WAAW,CAACV,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD,EACDtC,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACX,WAAW,EAAES,WAAW,CAACT,WAAW,CAAC,CACzD;GACF;EAAAI,MAAA,CAEMS,QAAQ,GAAR,SAAAA,SAASL,KAA2B;IACzC,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,OAAO9C,IAAI,CAACmD,QAAQ,CAClBnD,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACT,WAAW,CAAC,EACtDtC,IAAI,CAACiD,QAAQ,CAACF,WAAW,CAACV,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAAI,MAAA,CAEMU,OAAO,GAAP,SAAAA,QAAQN,KAA2B;IACxC,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,OAAO9C,IAAI,CAACgD,KAAK,CACfhD,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACT,WAAW,CAAC,EACtDtC,IAAI,CAACiD,QAAQ,CAACF,WAAW,CAACV,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAAI,MAAA,CAEMW,WAAW,GAAX,SAAAA,YAAYP,KAA2B;IAC5C,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,OAAO9C,IAAI,CAACqD,WAAW,CACrBrD,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACT,WAAW,CAAC,EACtDtC,IAAI,CAACiD,QAAQ,CAACF,WAAW,CAACV,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAAI,MAAA,CAEMO,QAAQ,GAAR,SAAAA,SAASH,KAA2B;IACzC,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,OAAO,IAAIV,QAAQ,CACjBpC,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACV,SAAS,CAAC,EACpDrC,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACX,WAAW,EAAES,WAAW,CAACT,WAAW,CAAC,CACzD;GACF;EAAAI,MAAA,CAEMY,MAAM,GAAN,SAAAA,OAAOR,KAA2B;IACvC,IAAMC,WAAW,GAAGX,QAAQ,CAACG,gBAAgB,CAACO,KAAK,CAAC;IACpD,OAAO,IAAIV,QAAQ,CACjBpC,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACZ,SAAS,EAAEU,WAAW,CAACT,WAAW,CAAC,EACtDtC,IAAI,CAACiD,QAAQ,CAAC,IAAI,CAACX,WAAW,EAAES,WAAW,CAACV,SAAS,CAAC,CACvD;GACF;EAAAK,MAAA,CAEMa,aAAa,GAAb,SAAAA,cACLC,iBAAyB,EACzBC,QACAC;QADAD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IAAA,IACvCD;MAAAA,WAAqB5D,QAAQ,CAACkC,aAAa;;IAE3C,CAAUpB,MAAM,CAACC,SAAS,CAAC2C,iBAAiB,CAAC,GAAA1C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA7CC,SAAS,QAAyCuC,iBAAiB,4BAAnEvC,SAAS;IACT,EAAUuC,iBAAiB,GAAG,CAAC,IAAA1C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA/BC,SAAS,QAA2BuC,iBAAiB,0BAArDvC,SAAS;IAETO,OAAO,CAACoC,GAAG,CAAC;MAAEC,SAAS,EAAEL,iBAAiB,GAAG,CAAC;MAAEE,QAAQ,EAAE7B,qBAAqB,CAAC6B,QAAQ;KAAG,CAAC;IAC5F,IAAMI,QAAQ,GAAG,IAAItC,OAAO,CAAC,IAAI,CAACa,SAAS,CAAC0B,QAAQ,EAAE,CAAC,CACpDC,GAAG,CAAC,IAAI,CAAC1B,WAAW,CAACyB,QAAQ,EAAE,CAAC,CAChCE,mBAAmB,CAACT,iBAAiB,CAAC;IACzC,OAAOM,QAAQ,CAACrC,QAAQ,CAACqC,QAAQ,CAACI,aAAa,EAAE,EAAET,MAAM,CAAC;GAC3D;EAAAf,MAAA,CAEMyB,OAAO,GAAP,SAAAA,QACLD,aAAqB,EACrBT,QACAC;QADAD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IAAA,IACvCD;MAAAA,WAAqB5D,QAAQ,CAACkC,aAAa;;IAE3C,CAAUpB,MAAM,CAACC,SAAS,CAACqD,aAAa,CAAC,GAAApD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAzCC,SAAS,QAAqCiD,aAAa,4BAA3DjD,SAAS;IACT,EAAUiD,aAAa,IAAI,CAAC,IAAApD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA5BC,SAAS,QAAwBiD,aAAa,sBAA9CjD,SAAS;IAETU,GAAG,CAACyC,EAAE,GAAGF,aAAa;IACtBvC,GAAG,CAAC0C,EAAE,GAAGnC,eAAe,CAACwB,QAAQ,CAAC;IAClC,OAAO,IAAI/B,GAAG,CAAC,IAAI,CAACU,SAAS,CAAC0B,QAAQ,EAAE,CAAC,CAACC,GAAG,CAAC,IAAI,CAAC1B,WAAW,CAACyB,QAAQ,EAAE,CAAC,CAACtC,QAAQ,CAACyC,aAAa,EAAET,MAAM,CAAC;;;;;EAG5Ga,YAAA,CAAAlC,QAAA;IAAAmC,GAAA;IAAAC,GAAA,EA7GA,SAAAA;MACE,OAAOxE,IAAI,CAACsD,MAAM,CAAC,IAAI,CAACjB,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;;IAGtDiC,GAAA;IAAAC,GAAA,EACA,SAAAA;MACE,OAAO,IAAIpC,QAAQ,CAACpC,IAAI,CAACyE,SAAS,CAAC,IAAI,CAACpC,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,EAAE,IAAI,CAACA,WAAW,CAAC;;;IACxFiC,GAAA;IAAAC,GAAA,EAyGD,SAAAA;MACE,OAAO,IAAIpC,QAAQ,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;EACtD,OAAAF,QAAA;AAAA;;AChJH,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAI,CAAC;AAE1B,IAAa8C,cAAmC,0BAAAC,SAAA;EAAAvD,cAAA,CAAAsD,cAAA,EAAAC,SAAA;EAmC9C,SAAAD,eAAsBE,QAAW,EAAEvC,SAAoB,EAAEC,WAAuB;;IAC9EjB,KAAA,GAAAsD,SAAA,CAAArD,IAAA,OAAMe,SAAS,EAAEC,WAAW,CAAC;IAC7B,CAAUtC,IAAI,CAAC6E,eAAe,CAACxD,KAAA,CAAKyC,QAAQ,EAAE/D,UAAU,CAAC,GAAAe,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAzDC,SAAS,QAAkD,QAAQ,IAAnEA,SAAS;IACTI,KAAA,CAAKuD,QAAQ,GAAGA,QAAQ;IACxBvD,KAAA,CAAKyD,YAAY,GAAG9E,IAAI,CAAC+E,YAAY,CAAC/E,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC2E,QAAQ,CAACnE,QAAQ,CAAC,CAAC;IAAA,OAAAY,KAAA;;;;;;;EAnCxFqD,cAAA,CAKcM,aAAa,GAApB,SAAAA,cAAyCJ,QAAW,EAAEK,SAAoB;IAC/E,OAAO,IAAIP,cAAc,CAACE,QAAQ,EAAEK,SAAS,CAAC;;;;;;;;EAGhDP,cAAA,CAMcQ,oBAAoB,GAA3B,SAAAA,qBACLN,QAAW,EACXvC,SAAoB,EACpBC,WAAsB;IAEtB,OAAO,IAAIoC,cAAc,CAACE,QAAQ,EAAEvC,SAAS,EAAEC,WAAW,CAAC;;;;;;EAG7DoC,cAAA,CAIcS,KAAK,GAAZ,SAAAA,MAAaF,SAAoB;IACtC,OAAOP,cAAc,CAACM,aAAa,CAAC9D,KAAK,CAACK,KAAK,EAAE0D,SAAS,CAAC;GAC5D;EAAA,IAAAvC,MAAA,GAAAgC,cAAA,CAAA/B,SAAA;EAAAD,MAAA,CASMG,GAAG,GAAH,SAAAA,IAAIC,KAAwB;IACjC,CAAU5C,cAAc,CAAC,IAAI,CAAC0E,QAAQ,EAAE9B,KAAK,CAAC8B,QAAQ,CAAC,GAAA9D,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAvDC,SAAS,QAAgD,UAAU,IAAnEA,SAAS;IACT,IAAMmE,KAAK,GAAAT,SAAA,CAAAhC,SAAA,CAASE,GAAG,CAAAvB,IAAA,OAACwB,KAAK,CAAC;IAC9B,OAAO4B,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAEQ,KAAK,CAAC/C,SAAS,EAAE+C,KAAK,CAAC9C,WAAW,CAAC;GAC9F;EAAAI,MAAA,CAEMQ,QAAQ,GAAR,SAAAA,SAASJ,KAAwB;IACtC,CAAU5C,cAAc,CAAC,IAAI,CAAC0E,QAAQ,EAAE9B,KAAK,CAAC8B,QAAQ,CAAC,GAAA9D,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAvDC,SAAS,QAAgD,UAAU,IAAnEA,SAAS;IACT,IAAMoE,UAAU,GAAAV,SAAA,CAAAhC,SAAA,CAASO,QAAQ,CAAA5B,IAAA,OAACwB,KAAK,CAAC;IACxC,OAAO4B,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAES,UAAU,CAAChD,SAAS,EAAEgD,UAAU,CAAC/C,WAAW,CAAC;GACxG;EAAAI,MAAA,CAEMO,QAAQ,GAAR,SAAAA,SAASH,KAA2B;IACzC,IAAMwC,UAAU,GAAAX,SAAA,CAAAhC,SAAA,CAASM,QAAQ,CAAA3B,IAAA,OAACwB,KAAK,CAAC;IACxC,OAAO4B,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAEU,UAAU,CAACjD,SAAS,EAAEiD,UAAU,CAAChD,WAAW,CAAC;GACxG;EAAAI,MAAA,CAEMY,MAAM,GAAN,SAAAA,OAAOR,KAA2B;IACvC,IAAMyC,OAAO,GAAAZ,SAAA,CAAAhC,SAAA,CAASW,MAAM,CAAAhC,IAAA,OAACwB,KAAK,CAAC;IACnC,OAAO4B,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAEW,OAAO,CAAClD,SAAS,EAAEkD,OAAO,CAACjD,WAAW,CAAC;GAClG;EAAAI,MAAA,CAEMa,aAAa,GAAb,SAAAA,cACLC,mBACAC,MAAe,EACfC;QAFAF;MAAAA,oBAA4B,CAAC;;IAAA,IAE7BE;MAAAA,WAAqB5D,QAAQ,CAACiC,UAAU;;IAExC,OAAO4C,SAAA,CAAAhC,SAAA,CAAMW,MAAM,CAAAhC,IAAA,OAAC,IAAI,CAACwD,YAAY,EAAEvB,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GAC1F;EAAAhB,MAAA,CAEMyB,OAAO,GAAP,SAAAA,QACLD,eACAT,MAAe,EACfC;QAFAQ;MAAAA,gBAAwB,IAAI,CAACU,QAAQ,CAACnE,QAAQ;;IAAA,IAE9CiD;MAAAA,WAAqB5D,QAAQ,CAACiC,UAAU;;IAExC,EAAUmC,aAAa,IAAI,IAAI,CAACU,QAAQ,CAACnE,QAAQ,IAAAK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjDC,SAAS,QAA0C,UAAU,IAA7DA,SAAS;IACT,OAAO0D,SAAA,CAAAhC,SAAA,CAAMW,MAAM,CAAAhC,IAAA,OAAC,IAAI,CAACwD,YAAY,EAAEX,OAAO,CAACD,aAAa,EAAET,MAAM,EAAEC,QAAQ,CAAC;GAChF;EAAAhB,MAAA,CAEM8C,OAAO,GAAP,SAAAA,QAAQ/B;QAAAA;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IACpDhC,KAAG,CAACyC,EAAE,GAAG,IAAI,CAACQ,QAAQ,CAACnE,QAAQ;IAC/B,OAAO,IAAIkB,KAAG,CAAC,IAAI,CAACmC,QAAQ,CAACC,QAAQ,EAAE,CAAC,CAACC,GAAG,CAAC,IAAI,CAACc,YAAY,CAACf,QAAQ,EAAE,CAAC,CAACtC,QAAQ,CAACgC,MAAM,CAAC;GAC5F;EAAA,OAAAiB,cAAA;AAAA,EApFqDtC,QAAQ;;ACThE,IAAMqD,WAAW,gBAAG,IAAIrD,QAAQ,eAACpC,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC;AAElD;;;;AAIA,SAASyF,SAASA,CAACC,QAAkB;EACnC,OAAO,IAAIC,OAAO,CAACD,QAAQ,CAACtD,SAAS,EAAEsD,QAAQ,CAACrD,WAAW,CAAC;AAC9D;AAEA,IAAasD,OAAQ,0BAAAjB,SAAA;EAAAvD,cAAA,CAAAwE,OAAA,EAAAjB,SAAA;EAArB,SAAAiB;;;;;;IAIkBvE,KAAA,UAAS,GAAS,IAAI;IAAA,OAAAA,KAAA;;EAyBvC,IAAAqB,MAAA,GAAAkD,OAAA,CAAAjD,SAAA;EAAAD,MAAA,CAvBCG,GAAG,GAAH,SAAAA,IAAIC,KAA2B;IAC7B,OAAO4C,SAAS,CAAAf,SAAA,CAAAhC,SAAA,CAAOE,GAAG,CAAAvB,IAAA,OAACwB,KAAK,EAAE;GACnC;EAAAJ,MAAA,CAEDQ,QAAQ,GAAR,SAAAA,SAASJ,KAA2B;IAClC,OAAO4C,SAAS,CAAAf,SAAA,CAAAhC,SAAA,CAAOO,QAAQ,CAAA5B,IAAA,OAACwB,KAAK,EAAE;GACxC;EAAAJ,MAAA,CAEDO,QAAQ,GAAR,SAAAA,SAASH,KAA2B;IAClC,OAAO4C,SAAS,CAAAf,SAAA,CAAAhC,SAAA,CAAOM,QAAQ,CAAA3B,IAAA,OAACwB,KAAK,EAAE;GACxC;EAAAJ,MAAA,CAEDY,MAAM,GAAN,SAAAA,OAAOR,KAA2B;IAChC,OAAO4C,SAAS,CAAAf,SAAA,CAAAhC,SAAA,CAAOW,MAAM,CAAAhC,IAAA,OAACwB,KAAK,EAAE;GACtC;EAAAJ,MAAA,CAEMa,aAAa,GAAb,SAAAA,cAAcC,mBAA+BC,MAAe,EAAEC,QAAmB;QAAnEF;MAAAA,oBAA4B,CAAC;;IAChD,OAAOmB,SAAA,CAAAhC,SAAA,CAAMM,QAAQ,CAAA3B,IAAA,OAACmE,WAAW,EAAElC,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACtF;EAAAhB,MAAA,CAEMyB,OAAO,GAAP,SAAAA,QAAQD,eAA2BT,MAAe,EAAEC,QAAmB;QAA/DQ;MAAAA,gBAAwB,CAAC;;IACtC,OAAOS,SAAA,CAAAhC,SAAA,CAAMM,QAAQ,CAAA3B,IAAA,OAACmE,WAAW,EAAEtB,OAAO,CAACD,aAAa,EAAET,MAAM,EAAEC,QAAQ,CAAC;GAC5E;EAAA,OAAAkC,OAAA;AAAA,EA5B0BxD,QAAQ;;ICLxByD,KAAuD,0BAAAlB,SAAA;EAAAvD,cAAA,CAAAyE,KAAA,EAAAlB,SAAA;;EAMlE,SAAAkB,MAAmBC,YAAmB,EAAEC,aAAqB,EAAEzD,WAAsB,EAAED,SAAoB;;IACzGhB,KAAA,GAAAsD,SAAA,CAAArD,IAAA,OAAMe,SAAS,EAAEC,WAAW,CAAC;IAE7BjB,KAAA,CAAKyE,YAAY,GAAGA,YAAY;IAChCzE,KAAA,CAAK0E,aAAa,GAAGA,aAAa;IAClC1E,KAAA,CAAK2E,MAAM,GAAG,IAAI5D,QAAQ,CACxBpC,IAAI,CAAC+E,YAAY,CAAC/E,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC6F,YAAY,CAACrF,QAAQ,CAAC,CAAC,EACtET,IAAI,CAAC+E,YAAY,CAAC/E,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC8F,aAAa,CAACtF,QAAQ,CAAC,CAAC,CACxE;IAAA,OAAAY,KAAA;;;;;EAGH,IAAAqB,MAAA,GAAAmD,KAAA,CAAAlD,SAAA;EAAAD,MAAA,CAGOE,MAAM,GAAN,SAAAA;IACL,OAAO,IAAIiD,KAAK,CAAC,IAAI,CAACE,aAAa,EAAE,IAAI,CAACD,YAAY,EAAE,IAAI,CAACzD,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;;;;EAG3FI,MAAA,CAIOO,QAAQ,GAAR,SAAAA,SAAuCH,KAAiC;IAC7E,CAAU5C,cAAc,CAAC,IAAI,CAAC6F,aAAa,EAAEjD,KAAK,CAACgD,YAAY,CAAC,GAAAhF,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAhEC,SAAS,QAAyD,OAAO,IAAzEA,SAAS;IACT,IAAM0E,QAAQ,GAAAhB,SAAA,CAAAhC,SAAA,CAASM,QAAQ,CAAA3B,IAAA,OAACwB,KAAK,CAAC;IACtC,OAAO,IAAI+C,KAAK,CAAC,IAAI,CAACC,YAAY,EAAEhD,KAAK,CAACiD,aAAa,EAAEJ,QAAQ,CAACrD,WAAW,EAAEqD,QAAQ,CAACtD,SAAS,CAAC;;;;;;EAGpGK,MAAA,CAIOuD,KAAK,GAAL,SAAAA,MAAMC,cAAqC;IAChD,CAAUhG,cAAc,CAACgG,cAAc,CAACtB,QAAQ,EAAE,IAAI,CAACkB,YAAY,CAAC,GAAAhF,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAApEC,SAAS,QAA6D,OAAO,IAA7EA,SAAS;IACT,IAAMkF,MAAM,GAAAxB,SAAA,CAAAhC,SAAA,CAASM,QAAQ,CAAA3B,IAAA,OAAC4E,cAAc,CAAC;IAC7C,OAAOxB,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACa,aAAa,EAAEI,MAAM,CAAC9D,SAAS,EAAE8D,MAAM,CAAC7D,WAAW,CAAC;;;;;;EAGtGI,MAAA,CAQOa,aAAa,GAAb,SAAAA,cAAcC,mBAA+BC,MAAe,EAAEC,QAAmB;QAAnEF;MAAAA,oBAA4B,CAAC;;IAChD,OAAO,IAAI,CAAC4C,mBAAmB,CAAC7C,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACnF;EAAAhB,MAAA,CAEMyB,OAAO,GAAP,SAAAA,QAAQD,eAA2BT,MAAe,EAAEC,QAAmB;QAA/DQ;MAAAA,gBAAwB,CAAC;;IACtC,OAAO,IAAI,CAACkC,mBAAmB,CAACjC,OAAO,CAACD,aAAa,EAAET,MAAM,EAAEC,QAAQ,CAAC;GACzE;EAAAY,YAAA,CAAAuB,KAAA;IAAAtB,GAAA;IAAAC,GAAA,EAVD,SAAAA;MACE,OAAAG,SAAA,CAAAhC,SAAA,CAAaM,QAAQ,CAAA3B,IAAA,OAAC,IAAI,CAAC0E,MAAM;;;EAClC,OAAAH,KAAA;AAAA,EAlDyEzD,QAAQ;;ACPpF;;;;AAIA,SAAgBiE,uBAAuBA,CAACC,OAAe;EACrD,IAAI;IACF,OAAOC,UAAU,CAACD,OAAO,CAAC;GAC3B,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAI/D,KAAK,CAAI6D,OAAO,8BAA2B;;AAEzD;;;ACZA,AAKA;;;AAGA,IAAaG,KAAM,0BAAAtF,aAAA;EAAAC,cAAA,CAAAqF,KAAA,EAAAtF,aAAA;EAOjB,SAAAsF,MAAmBC,OAAyB,EAAEJ,OAAe,EAAE7F,QAAgB,EAAEC,MAAe,EAAEC,IAAa;;IAC7GU,KAAA,GAAAF,aAAA,CAAAG,IAAA,OAAMb,QAAQ,EAAEC,MAAM,EAAEC,IAAI,CAAC;IAPfU,KAAA,QAAO,GAAU,KAAK;IACtBA,KAAA,QAAO,GAAS,IAAI;IAOlCA,KAAA,CAAKqF,OAAO,GAAGA,OAAO;IACtBrF,KAAA,CAAKiF,OAAO,GAAGD,uBAAuB,CAACC,OAAO,CAAC;IAAA,OAAAjF,KAAA;;;;;;EAGjD,IAAAqB,MAAA,GAAA+D,KAAA,CAAA9D,SAAA;EAAAD,MAAA,CAIOpC,MAAM,GAAN,SAAAA,OAAOwC,KAAY;;IAExB,IAAI,IAAI,KAAKA,KAAK,EAAE;MAClB,OAAO,IAAI;;IAEb,OAAO,IAAI,CAAC4D,OAAO,KAAK5D,KAAK,CAAC4D,OAAO,IAAI,IAAI,CAACJ,OAAO,KAAKxD,KAAK,CAACwD,OAAO;;;;;;;;EAGzE5D,MAAA,CAMOiE,WAAW,GAAX,SAAAA,YAAY7D,KAAY;IAC7B,EAAU,IAAI,CAAC4D,OAAO,KAAK5D,KAAK,CAAC4D,OAAO,IAAA5F,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxCC,SAAS,QAAiC,WAAW,IAArDA,SAAS;IACT,EAAU,IAAI,CAACqF,OAAO,KAAKxD,KAAK,CAACwD,OAAO,IAAAxF,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxCC,SAAS,QAAiC,WAAW,IAArDA,SAAS;IACT,OAAO,IAAI,CAACqF,OAAO,CAACM,WAAW,EAAE,GAAG9D,KAAK,CAACwD,OAAO,CAACM,WAAW,EAAE;GAChE;EAAA,OAAAH,KAAA;AAAA,EAnCwBjG,YAAY;AAsCvC,IAAaqG,KAAK,IAAAC,KAAA,OAAAA,KAAA,CACflH,OAAO,CAACmH,OAAO,iBAAG,IAAIN,KAAK,CAC1B7G,OAAO,CAACmH,OAAO,EACf,4CAA4C,EAC5C,EAAE,EACF,OAAO,EACP,eAAe,CAChB,EAAAD,KAAA,CACAlH,OAAO,CAACoH,OAAO,iBAAG,IAAIP,KAAK,CAC1B7G,OAAO,CAACoH,OAAO,EACf,4CAA4C,EAC5C,EAAE,EACF,OAAO,EACP,eAAe,CAChB,EAAAF,KAAA,CACAlH,OAAO,CAACqH,OAAO,iBAAG,IAAIR,KAAK,CAC1B7G,OAAO,CAACqH,OAAO,EACf,4CAA4C,EAC5C,EAAE,EACF,OAAO,EACP,eAAe,CAChB,EAAAH,KAAA,CACAlH,OAAO,CAACsH,KAAK,iBAAG,IAAIT,KAAK,CAAC7G,OAAO,CAACsH,KAAK,EAAE,4CAA4C,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,EAAAJ,KAAA,CACpHlH,OAAO,CAACuH,KAAK,iBAAG,IAAIV,KAAK,CAAC7G,OAAO,CAACuH,KAAK,EAAE,4CAA4C,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,EAAAL,KAAA,CACpHlH,OAAO,CAACwH,KAAK,iBAAG,IAAIX,KAAK,CAAC7G,OAAO,CAACwH,KAAK,EAAE,4CAA4C,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,EAAAN,KAAA,CACpHlH,OAAO,CAACyH,aAAa,iBAAG,IAAIZ,KAAK,CAChC7G,OAAO,CAACyH,aAAa,EACrB,4CAA4C,EAC5C,EAAE,EACF,OAAO,EACP,OAAO,CACR,EAAAP,KAAA,CACAlH,OAAO,CAAC0H,cAAc,iBAAG,IAAIb,KAAK,CAAC7G,OAAO,CAAC0H,cAAc,EAAE,4CAA4C,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,EAAAR,KAAA,CACtIlH,OAAO,CAAC2H,cAAc,iBAAG,IAAId,KAAK,CAAC7G,OAAO,CAAC2H,cAAc,EAAE,4CAA4C,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,EAAAT,KAAA,CACxI;;AC9ED;;;;;;AAMA,SAAgBU,kBAAkBA,CAChCC,QAA8B,EAC9BC,WAAkC,EAClCC,YAAoC;EAEpC,IAAMC,kBAAkB,GAAGH,QAAQ,CAACxB,KAAK,CAACyB,WAAW,CAAC;;EAEtD,IAAMG,WAAW,GAAGD,kBAAkB,CAAC1E,QAAQ,CAACyE,YAAY,CAAC,CAACrE,MAAM,CAACsE,kBAAkB,CAAC;EACxF,OAAO,IAAIhC,OAAO,CAACiC,WAAW,CAACxF,SAAS,EAAEwF,WAAW,CAACvF,WAAW,CAAC;AACpE;;ACfA;AACA;AACA,SAAgBwF,YAAYA,CAAIC,KAAU,EAAElF,GAAM,EAAEmF,OAAe,EAAEC,UAAkC;EACrG,EAAUD,OAAO,GAAG,CAAC,IAAAlH,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAArBC,SAAS,QAAc,eAAe,IAAtCA,SAAS;;EAET,EAAU8G,KAAK,CAACG,MAAM,IAAIF,OAAO,IAAAlH,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjCC,SAAS,QAA0B,YAAY,IAA/CA,SAAS;;EAGT,IAAI8G,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IACtBH,KAAK,CAACI,IAAI,CAACtF,GAAG,CAAC;IACf,OAAO,IAAI;GACZ,MAAM;IACL,IAAMuF,MAAM,GAAGL,KAAK,CAACG,MAAM,KAAKF,OAAO;;IAEvC,IAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,EAAErF,GAAG,CAAC,IAAI,CAAC,EAAE;MAC3D,OAAOA,GAAG;;IAGZ,IAAIwF,EAAE,GAAG,CAAC;MACRC,EAAE,GAAGP,KAAK,CAACG,MAAM;IAEnB,OAAOG,EAAE,GAAGC,EAAE,EAAE;MACd,IAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;MAC3B,IAAIL,UAAU,CAACF,KAAK,CAACQ,GAAG,CAAC,EAAE1F,GAAG,CAAC,IAAI,CAAC,EAAE;QACpCwF,EAAE,GAAGE,GAAG,GAAG,CAAC;OACb,MAAM;QACLD,EAAE,GAAGC,GAAG;;;IAGZR,KAAK,CAACS,MAAM,CAACH,EAAE,EAAE,CAAC,EAAExF,GAAG,CAAC;IACxB,OAAOuF,MAAM,GAAGL,KAAK,CAACU,GAAG,EAAG,GAAG,IAAI;;AAEvC;;AC/BO,IAAMC,gBAAgB,gBAAG1I,IAAI,CAACC,MAAM,CAACW,MAAM,CAAC8H,gBAAgB,CAAC;AAEpE,IAAMC,IAAI,gBAAG3I,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC3B,IAAM2I,GAAG,gBAAG5I,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC1B,IAAM4I,GAAG,gBAAG7I,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAE1B;;;;AAIA,SAAgB6I,IAAIA,CAACC,KAAW;EAC9B,CAAU/I,IAAI,CAACgJ,kBAAkB,CAACD,KAAK,EAAEJ,IAAI,CAAC,GAAA7H,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAAuC,UAAU,IAA1DA,SAAS;;EAGT,IAAIjB,IAAI,CAACmD,QAAQ,CAAC4F,KAAK,EAAEL,gBAAgB,CAAC,EAAE;IAC1C,OAAO1I,IAAI,CAACC,MAAM,CAACgJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACH,IAAI,CAAC9I,IAAI,CAACmJ,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGjE,IAAIK,CAAO;EACX,IAAIC,CAAO;EACXD,CAAC,GAAGL,KAAK;EACTM,CAAC,GAAGrJ,IAAI,CAAC6C,GAAG,CAAC7C,IAAI,CAACsD,MAAM,CAACyF,KAAK,EAAEF,GAAG,CAAC,EAAED,GAAG,CAAC;EAC1C,OAAO5I,IAAI,CAACmD,QAAQ,CAACkG,CAAC,EAAED,CAAC,CAAC,EAAE;IAC1BA,CAAC,GAAGC,CAAC;IACLA,CAAC,GAAGrJ,IAAI,CAACsD,MAAM,CAACtD,IAAI,CAAC6C,GAAG,CAAC7C,IAAI,CAACsD,MAAM,CAACyF,KAAK,EAAEM,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAER,GAAG,CAAC;;EAE1D,OAAOO,CAAC;AACV;;AC1BA;;;;;AAKA,SAAgBE,eAAeA,CAAC1E,QAAkB,EAAE8B,OAAgB;EAClE,IAAI9B,QAAQ,CAACvE,OAAO,EAAE;IACpB,EAAUuE,QAAQ,CAAC8B,OAAO,KAAKA,OAAO,IAAA5F,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAtCC,SAAS,QAA+B,UAAU,IAAlDA,SAAS;IACT,OAAO2D,QAAQ;;EAEjB,IAAIA,QAAQ,CAACrE,OAAO,EAAE,OAAOsG,KAAK,CAACH,OAAO,CAAC;EAC3C,MAAM,IAAIjE,KAAK,CAAC,UAAU,CAAC;AAC7B;;ACZA;;;;;AAKA,SAAgB8G,qBAAqBA,CACnCrD,cAAwC,EACxCQ,OAAgB;EAEhB,OAAOhC,cAAc,CAACQ,oBAAoB,CACxCoE,eAAe,CAACpD,cAAc,CAACtB,QAAQ,EAAE8B,OAAO,CAAC,EACjDR,cAAc,CAAC7D,SAAS,EACxB6D,cAAc,CAAC5D,WAAW,CAC3B;AACH;;;;"}